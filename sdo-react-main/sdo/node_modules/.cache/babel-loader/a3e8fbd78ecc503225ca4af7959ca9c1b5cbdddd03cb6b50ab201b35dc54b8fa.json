{"ast":null,"code":"/*! https://mths.be/base64 v1.0.0 by @mathias | MIT license */\n;\n(function (root) {\n  // Detect free variables `exports`.\n  var freeExports = typeof exports == 'object' && exports;\n\n  // Detect free variable `module`.\n  var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;\n\n  // Detect free variable `global`, from Node.js or Browserified code, and use\n  // it as `root`.\n  var freeGlobal = typeof global == 'object' && global;\n  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  var InvalidCharacterError = function (message) {\n    this.message = message;\n  };\n  InvalidCharacterError.prototype = new Error();\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n  var error = function (message) {\n    // Note: the error messages used throughout this file match those used by\n    // the native `atob`/`btoa` implementation in Chromium.\n    throw new InvalidCharacterError(message);\n  };\n  var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  // http://whatwg.org/html/common-microsyntaxes.html#space-character\n  var REGEX_SPACE_CHARACTERS = /[\\t\\n\\f\\r ]/g;\n\n  // `decode` is designed to be fully compatible with `atob` as described in the\n  // HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\n  // The optimized base64-decoding algorithm used is based on @atk’s excellent\n  // implementation. https://gist.github.com/atk/1020396\n  var decode = function (input) {\n    input = String(input).replace(REGEX_SPACE_CHARACTERS, '');\n    var length = input.length;\n    if (length % 4 == 0) {\n      input = input.replace(/==?$/, '');\n      length = input.length;\n    }\n    if (length % 4 == 1 ||\n    // http://whatwg.org/C#alphanumeric-ascii-characters\n    /[^+a-zA-Z0-9/]/.test(input)) {\n      error('Invalid character: the string to be decoded is not correctly encoded.');\n    }\n    var bitCounter = 0;\n    var bitStorage;\n    var buffer;\n    var output = '';\n    var position = -1;\n    while (++position < length) {\n      buffer = TABLE.indexOf(input.charAt(position));\n      bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;\n      // Unless this is the first of a group of 4 characters…\n      if (bitCounter++ % 4) {\n        // …convert the first 8 bits to a single ASCII character.\n        output += String.fromCharCode(0xFF & bitStorage >> (-2 * bitCounter & 6));\n      }\n    }\n    return output;\n  };\n\n  // `encode` is designed to be fully compatible with `btoa` as described in the\n  // HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\n  var encode = function (input) {\n    input = String(input);\n    if (/[^\\0-\\xFF]/.test(input)) {\n      // Note: no need to special-case astral symbols here, as surrogates are\n      // matched, and the input is supposed to only contain ASCII anyway.\n      error('The string to be encoded contains characters outside of the ' + 'Latin1 range.');\n    }\n    var padding = input.length % 3;\n    var output = '';\n    var position = -1;\n    var a;\n    var b;\n    var c;\n    var buffer;\n    // Make sure any padding is handled outside of the loop.\n    var length = input.length - padding;\n    while (++position < length) {\n      // Read three bytes, i.e. 24 bits.\n      a = input.charCodeAt(position) << 16;\n      b = input.charCodeAt(++position) << 8;\n      c = input.charCodeAt(++position);\n      buffer = a + b + c;\n      // Turn the 24 bits into four chunks of 6 bits each, and append the\n      // matching character for each of them to the output.\n      output += TABLE.charAt(buffer >> 18 & 0x3F) + TABLE.charAt(buffer >> 12 & 0x3F) + TABLE.charAt(buffer >> 6 & 0x3F) + TABLE.charAt(buffer & 0x3F);\n    }\n    if (padding == 2) {\n      a = input.charCodeAt(position) << 8;\n      b = input.charCodeAt(++position);\n      buffer = a + b;\n      output += TABLE.charAt(buffer >> 10) + TABLE.charAt(buffer >> 4 & 0x3F) + TABLE.charAt(buffer << 2 & 0x3F) + '=';\n    } else if (padding == 1) {\n      buffer = input.charCodeAt(position);\n      output += TABLE.charAt(buffer >> 2) + TABLE.charAt(buffer << 4 & 0x3F) + '==';\n    }\n    return output;\n  };\n  var base64 = {\n    'encode': encode,\n    'decode': decode,\n    'version': '1.0.0'\n  };\n\n  // Some AMD build optimizers, like r.js, check for specific condition patterns\n  // like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    define(function () {\n      return base64;\n    });\n  } else if (freeExports && !freeExports.nodeType) {\n    if (freeModule) {\n      // in Node.js or RingoJS v0.8.0+\n      freeModule.exports = base64;\n    } else {\n      // in Narwhal or RingoJS v0.7.0-\n      for (var key in base64) {\n        base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\n      }\n    }\n  } else {\n    // in Rhino or a web browser\n    root.base64 = base64;\n  }\n})(this);","map":{"version":3,"names":["root","freeExports","exports","freeModule","module","freeGlobal","global","window","InvalidCharacterError","message","prototype","Error","name","error","TABLE","REGEX_SPACE_CHARACTERS","decode","input","String","replace","length","test","bitCounter","bitStorage","buffer","output","position","indexOf","charAt","fromCharCode","encode","padding","a","b","c","charCodeAt","base64","define","amd","nodeType","key","hasOwnProperty"],"sources":["C:/Users/Ильгам/PycharmProjects/Online-laboratory-testing-system/sdo-react-main/sdo/node_modules/base-64/base64.js"],"sourcesContent":["/*! https://mths.be/base64 v1.0.0 by @mathias | MIT license */\r\n;(function(root) {\r\n\r\n\t// Detect free variables `exports`.\r\n\tvar freeExports = typeof exports == 'object' && exports;\r\n\r\n\t// Detect free variable `module`.\r\n\tvar freeModule = typeof module == 'object' && module &&\r\n\t\tmodule.exports == freeExports && module;\r\n\r\n\t// Detect free variable `global`, from Node.js or Browserified code, and use\r\n\t// it as `root`.\r\n\tvar freeGlobal = typeof global == 'object' && global;\r\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\r\n\t\troot = freeGlobal;\r\n\t}\r\n\r\n\t/*--------------------------------------------------------------------------*/\r\n\r\n\tvar InvalidCharacterError = function(message) {\r\n\t\tthis.message = message;\r\n\t};\r\n\tInvalidCharacterError.prototype = new Error;\r\n\tInvalidCharacterError.prototype.name = 'InvalidCharacterError';\r\n\r\n\tvar error = function(message) {\r\n\t\t// Note: the error messages used throughout this file match those used by\r\n\t\t// the native `atob`/`btoa` implementation in Chromium.\r\n\t\tthrow new InvalidCharacterError(message);\r\n\t};\r\n\r\n\tvar TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\t// http://whatwg.org/html/common-microsyntaxes.html#space-character\r\n\tvar REGEX_SPACE_CHARACTERS = /[\\t\\n\\f\\r ]/g;\r\n\r\n\t// `decode` is designed to be fully compatible with `atob` as described in the\r\n\t// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\r\n\t// The optimized base64-decoding algorithm used is based on @atk’s excellent\r\n\t// implementation. https://gist.github.com/atk/1020396\r\n\tvar decode = function(input) {\r\n\t\tinput = String(input)\r\n\t\t\t.replace(REGEX_SPACE_CHARACTERS, '');\r\n\t\tvar length = input.length;\r\n\t\tif (length % 4 == 0) {\r\n\t\t\tinput = input.replace(/==?$/, '');\r\n\t\t\tlength = input.length;\r\n\t\t}\r\n\t\tif (\r\n\t\t\tlength % 4 == 1 ||\r\n\t\t\t// http://whatwg.org/C#alphanumeric-ascii-characters\r\n\t\t\t/[^+a-zA-Z0-9/]/.test(input)\r\n\t\t) {\r\n\t\t\terror(\r\n\t\t\t\t'Invalid character: the string to be decoded is not correctly encoded.'\r\n\t\t\t);\r\n\t\t}\r\n\t\tvar bitCounter = 0;\r\n\t\tvar bitStorage;\r\n\t\tvar buffer;\r\n\t\tvar output = '';\r\n\t\tvar position = -1;\r\n\t\twhile (++position < length) {\r\n\t\t\tbuffer = TABLE.indexOf(input.charAt(position));\r\n\t\t\tbitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;\r\n\t\t\t// Unless this is the first of a group of 4 characters…\r\n\t\t\tif (bitCounter++ % 4) {\r\n\t\t\t\t// …convert the first 8 bits to a single ASCII character.\r\n\t\t\t\toutput += String.fromCharCode(\r\n\t\t\t\t\t0xFF & bitStorage >> (-2 * bitCounter & 6)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn output;\r\n\t};\r\n\r\n\t// `encode` is designed to be fully compatible with `btoa` as described in the\r\n\t// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\r\n\tvar encode = function(input) {\r\n\t\tinput = String(input);\r\n\t\tif (/[^\\0-\\xFF]/.test(input)) {\r\n\t\t\t// Note: no need to special-case astral symbols here, as surrogates are\r\n\t\t\t// matched, and the input is supposed to only contain ASCII anyway.\r\n\t\t\terror(\r\n\t\t\t\t'The string to be encoded contains characters outside of the ' +\r\n\t\t\t\t'Latin1 range.'\r\n\t\t\t);\r\n\t\t}\r\n\t\tvar padding = input.length % 3;\r\n\t\tvar output = '';\r\n\t\tvar position = -1;\r\n\t\tvar a;\r\n\t\tvar b;\r\n\t\tvar c;\r\n\t\tvar buffer;\r\n\t\t// Make sure any padding is handled outside of the loop.\r\n\t\tvar length = input.length - padding;\r\n\r\n\t\twhile (++position < length) {\r\n\t\t\t// Read three bytes, i.e. 24 bits.\r\n\t\t\ta = input.charCodeAt(position) << 16;\r\n\t\t\tb = input.charCodeAt(++position) << 8;\r\n\t\t\tc = input.charCodeAt(++position);\r\n\t\t\tbuffer = a + b + c;\r\n\t\t\t// Turn the 24 bits into four chunks of 6 bits each, and append the\r\n\t\t\t// matching character for each of them to the output.\r\n\t\t\toutput += (\r\n\t\t\t\tTABLE.charAt(buffer >> 18 & 0x3F) +\r\n\t\t\t\tTABLE.charAt(buffer >> 12 & 0x3F) +\r\n\t\t\t\tTABLE.charAt(buffer >> 6 & 0x3F) +\r\n\t\t\t\tTABLE.charAt(buffer & 0x3F)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (padding == 2) {\r\n\t\t\ta = input.charCodeAt(position) << 8;\r\n\t\t\tb = input.charCodeAt(++position);\r\n\t\t\tbuffer = a + b;\r\n\t\t\toutput += (\r\n\t\t\t\tTABLE.charAt(buffer >> 10) +\r\n\t\t\t\tTABLE.charAt((buffer >> 4) & 0x3F) +\r\n\t\t\t\tTABLE.charAt((buffer << 2) & 0x3F) +\r\n\t\t\t\t'='\r\n\t\t\t);\r\n\t\t} else if (padding == 1) {\r\n\t\t\tbuffer = input.charCodeAt(position);\r\n\t\t\toutput += (\r\n\t\t\t\tTABLE.charAt(buffer >> 2) +\r\n\t\t\t\tTABLE.charAt((buffer << 4) & 0x3F) +\r\n\t\t\t\t'=='\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\t};\r\n\r\n\tvar base64 = {\r\n\t\t'encode': encode,\r\n\t\t'decode': decode,\r\n\t\t'version': '1.0.0'\r\n\t};\r\n\r\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\r\n\t// like the following:\r\n\tif (\r\n\t\ttypeof define == 'function' &&\r\n\t\ttypeof define.amd == 'object' &&\r\n\t\tdefine.amd\r\n\t) {\r\n\t\tdefine(function() {\r\n\t\t\treturn base64;\r\n\t\t});\r\n\t}\telse if (freeExports && !freeExports.nodeType) {\r\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\r\n\t\t\tfreeModule.exports = base64;\r\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\r\n\t\t\tfor (var key in base64) {\r\n\t\t\t\tbase64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\r\n\t\t\t}\r\n\t\t}\r\n\t} else { // in Rhino or a web browser\r\n\t\troot.base64 = base64;\r\n\t}\r\n\r\n}(this));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}